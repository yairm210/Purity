name: Release version

on:
  push:
    tags:
      - '*'

permissions:
  contents: write  # Required for creating releases
  
jobs:
  release:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 1.8
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'zulu'
        
    - name: Build with Gradle
      run: ./gradlew clean build
      
    - name: Ensure tag is equal to all version strings
      run: |
        TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
        
        # In the files, the line looks like 'version = "1.0.0"'
        COMPILER_PLUGIN_VERSION=$(grep 'version = ' compiler-plugin/build.gradle.kts | cut -d'"' -f2)
        if [ "$TAG" != "$COMPILER_PLUGIN_VERSION" ]; then
          echo "Tag $TAG does not match compiler plugin version: $COMPILER_PLUGIN_VERSION"
          exit 1
        fi
        
        GRADLE_PLUGIN_VERSION=$(grep 'version = ' gradle-plugin/build.gradle.kts | cut -d'"' -f2)
        if [ "$TAG" != "$GRADLE_PLUGIN_VERSION" ]; then
          echo "Tag $TAG does not match gradle plugin version: $GRADLE_PLUGIN_VERSION"
          exit 1
        fi
        
        ANNOTATIONS_VERSION=$(grep 'version = ' annotations/build.gradle.kts | cut -d'"' -f2)
        if [ "$TAG" != "$ANNOTATIONS_VERSION" ]; then
          echo "Tag $TAG does not match annotations version: $ANNOTATIONS_VERSION"
          exit 1
        fi
        
        GRADLE_PLUGIN_VERSION_OF_COMPILER_PLUGIN=$(grep 'VERSION_NUMBER = ' gradle-plugin/src/main/kotlin/yairm210/purity/PurityGradlePlugin.kt | cut -d'"' -f2)
        if [ "$TAG" != "$GRADLE_PLUGIN_VERSION_OF_COMPILER_PLUGIN" ]; then
          echo "Tag $TAG does not match Gradle plugin version of the compiler plugin: $GRADLE_PLUGIN_VERSION_OF_COMPILER_PLUGIN"
          exit 1
        fi

    - name: Publish annotations
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALUSERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALPASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
      
      run: ./gradlew annotations:publishAndReleaseToMavenCentral

    - name: Publish compiler plugin
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALUSERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALPASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
        
      run: ./gradlew compiler-plugin:publishAndReleaseToMavenCentral --no-configuration-cache
      
    - name: Publish Gradle plugin
      env:
        GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
        GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
      run: ./gradlew gradle-plugin:publishPlugins
      
    - name: Create release
      run: gh release create $GITHUB_REF --generate-notes # --notes "Release of version $GITHUB_REF"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
